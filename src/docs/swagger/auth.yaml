paths:
  /auth/api-status:
    get:
      tags:
        - Auth
      summary: Check auth APIs status
      responses:
        200: 
          description: OK
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthStatus"
  /auth/me:
    get:
      tags:
        - Auth
      summary: Get user info
      description: Retrieve information about the authenticated user.
      security:
        - bearerAuth: []
      responses:
        200:
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized (User not authenticated)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthError"
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Sign up
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqAuthSignUp"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthSignUp"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthError"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthError"
  /auth/signin:
    post:
      tags:
        - Auth
      summary: Sign in
      requestBody:
        description: Request body (sign in by email or username)
        content:
          application/json:
            type: application/json
            schema:
              $ref: "#/components/schemas/ReqAuthSignIn"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthSignIn"
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: refreshToken=eyJhb...; Path=/; Expires=Sun, 22 Sep 2024 20:39:53 GMT;
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthError"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthError"

  /auth/signout:
    post:
      tags:
        - Auth
      summary: Sign out
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthSignOut"
  /auth/validation/send: 
    post: 
      tags:
        - Auth
      summary: Send verification code
      requestBody:
        description: Request body
        content:
          application/json:
            type: application/json
            schema:
              $ref: "#/components/schemas/ReqAuthSendCode"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthSendCode"
  /auth/validation/verify:
    post: 
      tags:
        - Auth
      summary: Validate verification code
      requestBody:
        description: Request body
        content:
          application/json:
            type: application/json
            schema:
              $ref: "#/components/schemas/ReqAuthVerifyCode"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthSendCode"
  /auth/refresh-token:
    post: 
      tags:
        - Auth
      summary: Refresh token
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResAuthRefreshToken"
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Initiate password reset by sending a reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
              required:
                - email
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResForgotPassword'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResForgotPasswordError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResForgotPasswordError'
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset user password using the reset token
      parameters:
        - name: token
          in: query
          description: token received in the email
          required: true
          schema:
            type: string
            example: "1dshfgjsdgfksdhkfjsdncxadigfyiad..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: "NewSecurePass123!"
              required:
                - token
                - newPassword
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResResetPassword'
        '400':
          description: Invalid or expired token / Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResResetPasswordError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResResetPasswordError'
  
components:
  schemas:
    ResAuthStatus:
      type: object
      properties: 
        message: 
          type: string
        success:
          type: boolean
        code:
          type: number
    ReqAuthSignUp:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Wick"
        username:
          type: string
          example: "johnwick"
        email: 
          type: string
          example: "johnwick@gmail.com"
        password:
          type: string
          example: "johnwick123"
        role:
          type: string
          exmaple: "student"
    ReqAuthSignIn:
      type: object
      properties:
        account: 
          type: string
          example: "teacher"
        password:
          type: string
          example: "teacher123"
    ResAuthSignUp:
      type: object
      properties: 
        message: 
          type: string
          example: "Sign up success. Please check your email to verify the account"
        status:
          type: string
          example: "success"
        userVerification: 
          type: object
          properties:
            id:
              type: string
            userId:
              type: string
    ResAuthSignIn:
      type: object
      properties:
        message: 
          type: string
          example: "Sign in success"
        status:
          type: string
          example: "success"
        tokens:
          type: object
          properties:
            accessToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          required:
            - accessToken
            - refreshToken
        user:
          $ref: "#/components/schemas/User"
    ResAuthSignOut:
      type: object
      properties:
        message: 
          type: string
        success:
          type: boolean
    ReqAuthSendCode:
      type: object
      properties:
        id: 
          type: string
        email:
          type: string
    ReqAuthVerifyCode:
      type: object
      properties:
        id: 
          type: string
        userId:
          type: string
        code:
          type: string
    ResAuthSendCode:
      type: object
      properties: 
        message: 
          type: string
        status:
          type: string
        code:
          type: number
    ResAuthRefreshToken:
      type: object
      properties:
        tokens:
          type: object
          properties:
            accessToken:
              type: string
        message: 
          type: string
        success:
          type: boolean
    ResAuthError:
      type: object
      properties:
        message:
          type: string
          example: "Not authenticated"
        status:
          type: string
          example: "success"
    ResForgotPassword:
      type: object
      properties:
        message:
          type: string
          example: "Password has been reset successfully."
        status:
          type: string
          example: "success"
    ResForgotPasswordError: 
      type: object
      properties:
        message:
          type: string
          example: "Error"
        status:
          type: string
          example: "failed" 
    ResResetPassword:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
    ResResetPasswordError:
      type: object
      properties:
        message:
          type: string
          example: "Error"
        status:
          type: string
          example: "failed"
    User:
      type: object
      properties:
        id:
          type: string
          example: "48309873-2ec9-438a-b81f-f960a387bcd7"
        email:
          type: string
          example: "student@gmail.com"
        username:
          type: string
          example: "student"
        role:
          type: string
          example: "user"
        isVerified:
          type: boolean
          example: true
        userProfileId:
          type: string
          example: "e2a86b52-c740-49cb-8905-d85cd9919d82"
        createdAt:
          type: string
          format: date-time
          example: "2024-11-14T06:56:31.024Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-11-14T06:56:31.024Z"
        deletedAt:
          type: string
          format: date-time
          nullable: true
          example: null

