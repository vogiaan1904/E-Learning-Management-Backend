model Student {
    id          String       @id
    user        User         @relation(fields: [id], references: [id], onDelete: Cascade)
    enrollments Enrollment[]

    @@map("Students")
}

model Enrollment {
    id                  String            @id @default(uuid())
    studentId           String
    courseId            String
    student             Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
    course              Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
    quizzSubmissions    QuizzSubmission[]
    grade               Int               @default(0)
    feedback            String?
    status              EnrollmentStatus  @default(IN_PROGRESS)
    completion          Int               @default(0)
    completedLessonsIds String[]
    completedModulesIds String[]
    enrolledAt          DateTime          @default(now())
    cancelledAt         DateTime?

    @@unique([studentId, courseId])
    @@map("Enrollments")
}

model QuizzSubmission {
    id                String             @id @default(uuid())
    quizzId           String
    enrollmentId      String
    score             Int
    quizz             Quizz              @relation(fields: [quizzId], references: [id], onDelete: Cascade)
    status            SubmissionStatus   @default(unfinished)
    enrollment        Enrollment         @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    submissionAnswers SubmissionAnswer[]
    submittedAt       DateTime           @default(now())
}

model SubmissionAnswer {
    id                String          @id @default(uuid())
    // questionAnswerId  String
    // questionAnswer    QuestionAnswer  @relation(fields: [questionAnswerId], references: [id])
    quizzSubmissionId String
    quizzSubmission   QuizzSubmission @relation(fields: [quizzSubmissionId], references: [id], onDelete: Cascade)
    createdAt         DateTime        @default(now())

    @@map("submissionAnswers")
}

enum SubmissionStatus {
    finished
    unfinished
}

enum EnrollmentStatus {
    COMPLETED
    IN_PROGRESS
    CANCELLED
}
