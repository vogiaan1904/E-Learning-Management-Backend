model Enrollment {
    userId              String
    courseId            String
    user                User                @relation(fields: [userId], references: [id])
    course              Course              @relation(fields: [courseId], references: [id])
    enrolledAt          DateTime            @default(now())
    cancelled           Boolean             @default(true)
    studentCourseDetail StudenCourseDetail?
    quizzSubmissions    QuizzSubmission[]

    @@id([userId, courseId])
    @@map("Enrollments")
}

model StudenCourseDetail {
    userId     String
    courseId   String
    grade      Int
    feedback   String
    status     String
    completion Int
    enrollment Enrollment @relation(fields: [userId, courseId], references: [userId, courseId])
    createdAt  DateTime   @default(now())

    @@id([userId, courseId])
    @@map("StudentCourseDetails")
}

model QuizzSubmission {
    id                String             @id @default(uuid())
    userId            String
    courseId          String
    quizzId           String
    quizz             Quizz              @relation(fields: [quizzId], references: [id])
    status            SubmissionStatus   @default(UNFINISHED)
    enrollment        Enrollment         @relation(fields: [userId, courseId], references: [userId, courseId])
    submissionAnswers SubmissionAnswer[]
    submittedAt       DateTime           @default(now())
}

model SubmissionAnswer {
    id                String          @id @default(uuid())
    questionAnswerId  String
    questionAnswer    QuestionAnswer  @relation(fields: [questionAnswerId], references: [id])
    quizzSubmissionId String
    quizzSubmission   QuizzSubmission @relation(fields: [quizzSubmissionId], references: [id])
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @default(now())

    @@map("submissionAnswers")
}

enum SubmissionStatus {
    FINISHED
    UNFINISHED
}
