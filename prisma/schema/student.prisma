model Student {
    id          String       @id
    user        User         @relation(fields: [id], references: [id], onDelete: Cascade)
    enrollments Enrollment[]

    @@map("Students")
}

model Enrollment {
    id                  String            @id @default(uuid())
    studentId           String
    courseId            String
    student             Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
    course              Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
    quizzSubmissions    QuizzSubmission[]
    grade               Int               @default(0)
    feedback            String?
    status              EnrollmentStatus  @default(IN_PROGRESS)
    completion          Int               @default(0)
    Reviews             Review[]
    completedLessonsIds String[]
    completedModulesIds String[]
    enrolledAt          DateTime          @default(now())
    cancelledAt         DateTime?

    @@unique([studentId, courseId])
    @@map("Enrollments")
}

model QuizzSubmission {
    id                    String           @id @default(uuid())
    quizzId               String
    enrollmentId          String
    score                 Int              @default(0)
    quizz                 Quizz            @relation(fields: [quizzId], references: [id], onDelete: Cascade)
    status                SubmissionStatus @default(UNFINISHED)
    enrollment            Enrollment       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    submissionEvaluations Json[]
    createdAt             DateTime         @default(now())
    dueAt                 DateTime
    submittedAt           DateTime?
}

model Review {
    id           String   @id @default(uuid())
    enrollmentId String   @unique
    rating       Float
    comment      String?
    createdAt    DateTime @default(now())

    enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId   String

    @@map("Reviews")
}

enum SubmissionStatus {
    UNFINISHED
    COMPLETED
}

enum EnrollmentStatus {
    COMPLETED
    IN_PROGRESS
    CANCELLED
}
