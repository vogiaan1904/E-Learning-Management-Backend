enum Gender {
  MALE
  FEMALE
  CUSTOM
}

enum Role {
  user
  teacher
  admin
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  username         String             @unique
  password         String
  role             Role               @default(user)
  isVerified       Boolean            @default(false)
  userVerification UserVerification[]
  notifications    Notification[]
  FCMTokens        FCMToken[]
  userProfileId    String             @unique
  userProfile      UserProfifle       @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  student          Student?
  teacher          Teacher?
  admin            Admin?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([email, username, deletedAt])
  @@map("Users")
}

model UserProfifle {
  id          String    @id @default(uuid())
  user        User?
  firstName   String
  lastName    String
  birth       DateTime?
  gender      Gender    @default(CUSTOM)
  avatar      String
  phoneNumber String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  @@map("UserProfiles")
}

model UserVerification {
  id        String    @id @default(uuid())
  userId    String
  code      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  expiredAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserVerifications")
}
