enum Gender {
  MALE
  FEMALE
  CUSTOM
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  username         String             @unique
  password         String
  role             Role               @default(STUDENT)
  isVerified       Boolean            @default(false)
  profileId        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  deletedAt        DateTime?
  userProfile      UserProfifle?
  student          Student?
  teacher          Teacher?
  UserVerification UserVerification[]
  UserToken        UserToken[]

  @@index([email, username, deletedAt])
  @@map("Users")
}

model UserProfifle {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  birth       DateTime?
  gender      Gender    @default(CUSTOM)
  avatar      String
  phoneNumber String?
  address     String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  @@map("UserProfiles")
}

model UserVerification {
  id        String    @id @default(uuid())
  userId    String
  code      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  expiredAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("UserVerifications")
}

model UserToken {
  id        String    @id
  userId    String
  token     String
  createdAt DateTime  @default(now())
  expiredAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("UserTokens")
}
